/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package game;

import org.junit.Before;
import org.junit.Test;

import java.io.*;
import java.sql.Array;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class AppTest {

    private static final WordChoser wordChoser = mock(WordChoser.class);

    private static final Masker masker = mock(Masker.class);

    @Before public void setupTests() {
        when(wordChoser.getRandomWordFromDictionary()).thenReturn("AB");
    }

    @Test public void testGuessTwoLetterWordWithin10Tries() throws IOException {
        // mock getMaskedWord
        when(masker.getMaskedWord("AB", new ArrayList<>())).thenReturn("A_");
        when(masker.getMaskedWord("AB", new ArrayList<>(List.of('B')))).thenReturn("AB");

        // define user input and number of tries
        String[] appOutput = runApp("C\nB", 3);

        // show welcome message
        assertEquals("Welcome! Today the word to guess is:", appOutput[0]);

        // first loop
        assertEquals("A_", appOutput[1]);
        assertEquals("Enter one letter to guess (10 attempts remaining): ", appOutput[2]);
        assertEquals("Wrong...", appOutput[3]);

        // second loop
        assertEquals("A_", appOutput[4]);
        assertEquals("Enter one letter to guess (9 attempts remaining): ", appOutput[5]);
        assertEquals("Right!", appOutput[6]);

        // third loop
        assertEquals("AB", appOutput[7]);
        assertEquals("You won!", appOutput[8]);
    }

    @Test public void testGuessTwoLetterWordGoneWrong() throws IOException {
        // mock getMaskedWord
        when(masker.getMaskedWord("AB", new ArrayList<>())).thenReturn("A_");

        // define user input and number of tries
        String userInput = "C\n".repeat(10);
        String[] appOutput = runApp(userInput, 11);

        // show welcome message
        assertEquals("Welcome! Today the word to guess is:", appOutput[0]);

        // first loop
        assertEquals("A_", appOutput[1]);
        assertEquals("Enter one letter to guess (10 attempts remaining): ", appOutput[2]);
        assertEquals("Wrong...", appOutput[3]);

        // tenth loop
        assertEquals("Enter one letter to guess (1 attempts remaining): ", appOutput[29]);
        assertEquals("Wrong...", appOutput[30]);
        assertEquals("You lost...", appOutput[32]);
    }

    private String[] runApp(String userInput, int tries) throws IOException {
        // instead of System.in (what a user types into the console)
        InputStream input = new ByteArrayInputStream(userInput.getBytes());

        // instead of System.out (what the console returns)
        ArrayList<Character> captured = new ArrayList<>();
        OutputStream output = new OutputStream() {
            @Override
            public void write(int inByteValue) throws IOException {
                captured.add((char) inByteValue);
            }
        };

        App app = new App(input, new PrintStream(output), new Game(wordChoser, masker), tries);
        app.run();

        // modify captured to something that is testable
        String appOutput = captured.stream()
                .map(Object::toString)
                .reduce("", (acc, e) -> acc  + e);
        return appOutput.split("\\r?\\n");
    }
}